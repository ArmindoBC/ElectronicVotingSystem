class EleicaoTest
types
 		public CadernoEleitoral =  set of Eleitor;
		public Candidatos =  set of Candidato;
		public listaCandidatos = seq of Candidato;
		public listaEleitor = seq of Eleitor;
instance variables
		-- conjuntos a pertencer às instâncias
		cadernoEleitoral :  CadernoEleitoral := {};
		candidatos : Candidatos := {};
		-- sequências para consulta
		lcadernoEleitoral : listaEleitor := [];
		lcandidatos : listaCandidatos := [];
		memoriaSeguranca : [MemoriaDeSeguranca]:= nil;
		eleicao : [Eleicao] := nil; 
		math : MATH := new MATH();
		nrRandom : nat1 := 1;
operations
		
	public simplesEleicao: () ==> ()
	simplesEleicao() == (
		
		registarCandidatos();
		registarEleitores();		
		
		memoriaSeguranca := new MemoriaDeSeguranca(candidatos);
		
		eleicao :=  new Eleicao(candidatos, cadernoEleitoral, memoriaSeguranca);
		
		for eleitor in lcadernoEleitoral do
		(
			eleicao.Autenticacao(eleitor);
			eleicao.ValidacaoDoEleitor();
			eleicao.Selecao(candidatoAleatorio());
			eleicao.confirmarVotacao();
			eleicao.completarVotacao();
			
		);
		
		eleicao.registoDeAtividades.imprimeRegisto();
			
	);
	
	public registarCandidatos: () ==> ()
		registarCandidatos() == (
			lcandidatos  := lcandidatos ^ [new Candidato("Paulo Portas", <CDS>)];
			lcandidatos  := lcandidatos ^ [new Candidato("Passos Coelho", <PSD>)];
			lcandidatos  := lcandidatos ^ [new Candidato("Antonio Costa", <PS>)];
			lcandidatos  := lcandidatos ^ [new Candidato("Catarina Martins", <BE>)];
			lcandidatos  := lcandidatos ^ [new Candidato("Jeronimo de Sousa", <PCP>)];
			
			for candidato in lcandidatos do
			(
				candidatos := candidatos  union {candidato};
			);
			
		);
		
	public registarEleitores: () ==> ()
		registarEleitores() == (
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Armindo", 21,"St M Maior",12122)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Mike", 22,"Paranhos",11122)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Joao", 58,"Darque",13322)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Diogo", 23,"Areosa",14422)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Miguel", 98,"Carreco",127654)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Ana", 19,"Caminha",12345)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Luisa", 23,"Viana",11255)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Jessica", 34,"Lisboa",11335)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Raquel", 65,"Barcelos",87654)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Luis", 56,"Porto",23232)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Ruben", 31,"Lousada",323232)];
			lcadernoEleitoral := lcadernoEleitoral  ^ [new Eleitor("Duarte", 44,"Penafiel",165433)];
			
			for eleitor in lcadernoEleitoral do
			(
				cadernoEleitoral := cadernoEleitoral  union {eleitor};
			);
		);
		
		public candidatoAleatorio: () ==> Candidato
			candidatoAleatorio() == (
				nrRandom := math.rand(len lcandidatos+1);
				return lcandidatos(nrRandom);
			);
	
	public static main : () ==> ()
		main() == (
			new EleicaoTest().simplesEleicao();
		);
end EleicaoTest